# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'
services:
  backendserver:
    build: ./backend
    environment:
      - API_URL=http://api:8080
    ports:
      - "3000:3000" # mapping the external port 3333 to container's internal port 3000 (on your computer use localhost:3333)
    # volumes: # every time you make a change, this will reload the changes in the container
    #   - ./backend:/app/backend # write these as ./<path to folder>:/<path to folder in container>
    #   - ./backend/node_modules:/app/backend/node_modules
    volumes:
      - shared-volume:/app/backend/database/
  backendengine:
    build: ./backend/dataStreamAPI
    ports:
      - "8080:8080" # mapping the external port 5555 to container's internal port 5000 (on your computer use localhost:5555)
    environment: # environment variables required for flask
      - FLASK_ENV=development
      - FLASK_APP=app.py
    volumes:
      - shared-volume:/app/backend/database/ # similar to below, this means when we make flask changes, it reloads in container
    command: python app.py --reload # this overrides the CMD in the Dockerfile and runs flask
  frontend:
    build: ./frontend
    environment:
      - PORT=3001
    ports:
      - "3001:3001" # mapping the external port 3333 to container's internal port 3000 (on your computer use localhost:3333)
    depends_on:
      - backendserver
    # volumes: # every time you make a change, this will reload the changes in the container
    #   - ./frontend/src:/app/frontend # write these as ./<path to folder>:/<path to folder in container>
    #   - ./frontend/node_modules:/app/frontend/node_modules
volumes:
  shared-volume: